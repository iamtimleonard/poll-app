{"version":3,"sources":["components/Options.js","components/PollCard.js","components/PollsList.js","components/NewPoll.js","App.js","reportWebVitals.js","index.js"],"names":["Options","votes","options","id","handleVote","useState","choice","setChoice","voted","setVoted","map","option","index","onSubmit","e","preventDefault","onClick","target","value","type","name","htmlFor","PollCard","question","active","setActive","className","PollsList","polls","poll","_id","NewPoll","handleCreate","setQuestion","newOption","setNewOption","setOptions","onChange","placeholder","text","color","filter","disabled","length","newOptionObj","Math","floor","random","optionsList","pollData","alert","App","setPolls","useEffect","a","fetchPolls","pollsFromServer","getPolls","fetch","res","json","data","to","path","exact","pollFromState","find","remainingPolls","axios","post","then","console","log","Array","fill","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA0CeA,EAxCC,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,WAAiB,EAC1BC,mBAAS,GADiB,mBAC/CC,EAD+C,KACvCC,EADuC,OAE5BF,oBAAS,GAFmB,mBAE/CG,EAF+C,KAExCC,EAFwC,KAUtD,OACE,mCACGD,EACC,mCACGN,EAAQQ,KAAI,SAACC,EAAQC,GAAT,OACX,sCAAmBD,EAAnB,aAA8BV,EAAMW,GAApC,YACmB,IAAjBX,EAAMW,GAAe,OAAS,UADxBA,QAMZ,uBAAMC,SAjBS,SAACC,GACpBA,EAAEC,iBACFN,GAAS,GACTL,EAAWE,EAAQH,IAcf,UACGD,EAAQQ,KAAI,SAACC,EAAQC,GAAT,OACX,gCACE,uBACEI,QAAS,SAACF,GAAD,OAAOP,EAAUO,EAAEG,OAAOC,QACnCC,KAAK,QACLC,KAAMjB,EACNe,MAAON,IAET,uBAAOS,QAAST,EAAhB,SAAwBD,MAPhBC,MAUZ,gDCfKU,EAjBE,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,SAAUrB,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,WAAYH,EAAY,EAAZA,MAAY,EACrCI,oBAAS,GAD4B,mBAC1DmB,EAD0D,KAClDC,EADkD,KAEjE,OACE,sBAAKC,UAAU,YAAf,UACE,oBAAIV,QAAS,kBAAMS,GAAWD,IAA9B,SAAwCD,IACvCC,GACC,cAAC,EAAD,CACEvB,MAAOA,EACPG,WAAYA,EACZF,QAASA,EACTC,GAAIA,QCMCwB,EAjBG,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOxB,EAAiB,EAAjBA,WAC1B,OACE,mCACGwB,EAAMlB,KAAI,SAACmB,GAAD,OACT,cAAC,EAAD,CACE3B,QAAS2B,EAAK3B,QAEdqB,SAAUM,EAAKN,SACfpB,GAAI0B,EAAKC,IACT7B,MAAO4B,EAAK5B,MACZG,WAAYA,GAJPyB,EAAKC,W,QCuELC,EA5EC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACJ3B,mBAAS,IADL,mBAC7BkB,EAD6B,KACnBU,EADmB,OAEF5B,mBAAS,IAFP,mBAE7B6B,EAF6B,KAElBC,EAFkB,OAGN9B,mBAAS,IAHH,mBAG7BH,EAH6B,KAGpBkC,EAHoB,KAkCpC,OACE,qBAAKV,UAAU,WAAf,SACE,iCACE,qBAAKA,UAAU,eAAf,SACE,uBACEW,SAAU,SAACvB,GAAD,OAAOmB,EAAYnB,EAAEG,OAAOC,QACtCA,MAAOK,EACPJ,KAAK,OACLC,KAAK,GACLjB,GAAG,GACHmC,YAAY,oBAGfpC,EAAQQ,KAAI,SAACC,EAAQC,GAAT,OACX,8BACGD,EAAO4B,KACR,cAAC,IAAD,CAASC,MAAM,MAAMxB,QAAS,kBAnBlBb,EAmBqCQ,EAAOR,QAlBhEiC,EAAWlC,EAAQuC,QAAO,SAAC9B,GAAD,OAAYA,EAAOR,KAAOA,MADjC,IAACA,OAiBNQ,EAAOR,OAKjB,qBAAKuB,UAAU,eAAf,SACE,uBACER,MAAOgB,EACPG,SAAU,SAACvB,GAAD,OAAOqB,EAAarB,EAAEG,OAAOC,QACvCC,KAAK,OACLmB,YAAY,sBAGhB,wBAAQI,UAAWR,EAAUS,OAAQ3B,QAxDnB,SAACF,GACvBA,EAAEC,iBACF,IAAM6B,EAAe,CACnBL,KAAML,EACN/B,GAAI0C,KAAKC,MAAsB,IAAhBD,KAAKE,WAEtBX,EAAW,GAAD,mBAAKlC,GAAL,CAAc0C,KACxBT,EAAa,KAiDT,wBAGA,wBACEnB,QAlDW,SAACF,GAElB,GADAA,EAAEC,iBACGQ,EAAL,CAIA,IAAIyB,EAAc9C,EAAQQ,KAAI,SAACC,GAAD,OAAYA,EAAO4B,QAC3CU,EAAW,CACf1B,WACArB,QAAS8C,GAEXf,EAAY,IACZE,EAAa,IACbC,EAAW,IACXJ,EAAaiB,QAXXC,MAAM,0BAgDFR,SAAUR,EAAUS,QAAUzC,EAAQyC,OAAS,IAAMpB,EAASoB,OAC9DxB,KAAK,SAHP,0B,iBCPOgC,EAtDH,WAAO,IAAD,EACU9C,mBAAS,IADnB,mBACTuB,EADS,KACFwB,EADE,KAEhBC,qBAAU,YACM,uCAAG,4BAAAC,EAAA,sEACeC,IADf,OACTC,EADS,OAEfJ,EAASI,GAFM,2CAAH,qDAIdC,KACC,IACH,IAAMF,EAAU,uCAAG,8BAAAD,EAAA,sEACCI,MAAM,+BADP,cACXC,EADW,gBAEEA,EAAIC,OAFN,cAEXC,EAFW,yBAGVA,GAHU,2CAAH,qDAqBhB,OACE,eAAC,IAAD,WACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,uBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,UAAT,kCAIN,sBAAKpC,UAAU,YAAf,UACE,cAAC,IAAD,CAAOqC,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,EAAD,CAAWpC,MAAOA,EAAOxB,WA9Bd,SAACE,EAAQH,GAC1B,IAAI8D,EAAgBrC,EAAMsC,MAAK,SAACrC,GAAD,OAAUA,EAAKC,MAAQ3B,KAClDgE,EAAiBvC,EAAMa,QAAO,SAACZ,GAAD,OAAUA,EAAKC,MAAQ3B,KACzD8D,EAAchE,MAAMK,KACpB8D,IACGC,KADH,2CAC4ClE,GAAM8D,GAC/CK,MAAK,SAACX,GAAD,OAASY,QAAQC,IAAIb,EAAIE,SACjCT,EAAS,CAACa,GAAF,mBAAoBE,UAyBxB,cAAC,IAAD,CAAOJ,KAAK,UAAZ,SACE,cAAC,EAAD,CAAS/B,aAxBI,SAACiB,GACpBA,EAAShD,MAAQ,IAAIwE,MAAMxB,EAAS/C,QAAQyC,QAAQ+B,KAAK,GACzDN,IAAMC,KAAN,kCAA8CpB,GAAUqB,MAAK,SAACX,GAC5DV,EAASnB,IAAM6B,EAAIE,KACnBT,EAAS,GAAD,mBAAKxB,GAAL,CAAYqB,oBCrBX0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9ad137f9.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst Options = ({ votes, options, id, handleVote }) => {\n  const [choice, setChoice] = useState(1);\n  const [voted, setVoted] = useState(false);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setVoted(true);\n    handleVote(choice, id);\n  };\n\n  return (\n    <>\n      {voted ? (\n        <>\n          {options.map((option, index) => (\n            <p key={index}>{`${option}: ${votes[index]} ${\n              votes[index] === 1 ? \"vote\" : \"votes\"\n            }`}</p>\n          ))}\n        </>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          {options.map((option, index) => (\n            <div key={index}>\n              <input\n                onClick={(e) => setChoice(e.target.value)}\n                type=\"radio\"\n                name={id}\n                value={index}\n              />\n              <label htmlFor={index}>{option}</label>\n            </div>\n          ))}\n          <button>Vote</button>\n        </form>\n      )}\n    </>\n  );\n};\n\nexport default Options;\n","import { useState } from \"react\";\nimport Options from \"./Options\";\n\nconst PollCard = ({ question, options, id, handleVote, votes }) => {\n  const [active, setActive] = useState(false);\n  return (\n    <div className=\"poll-card\">\n      <h2 onClick={() => setActive(!active)}>{question}</h2>\n      {active && (\n        <Options\n          votes={votes}\n          handleVote={handleVote}\n          options={options}\n          id={id}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PollCard;\n","import PollCard from \"./PollCard\";\n\nconst PollsList = ({ polls, handleVote }) => {\n  return (\n    <>\n      {polls.map((poll) => (\n        <PollCard\n          options={poll.options}\n          key={poll._id}\n          question={poll.question}\n          id={poll._id}\n          votes={poll.votes}\n          handleVote={handleVote}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default PollsList;\n","import { useState } from \"react\";\nimport { FaAngry } from \"react-icons/fa\";\n\nconst NewPoll = ({ handleCreate }) => {\n  const [question, setQuestion] = useState(\"\");\n  const [newOption, setNewOption] = useState(\"\");\n  const [options, setOptions] = useState([]);\n\n  const handleAddOption = (e) => {\n    e.preventDefault();\n    const newOptionObj = {\n      text: newOption,\n      id: Math.floor(Math.random() * 100000),\n    };\n    setOptions([...options, newOptionObj]);\n    setNewOption(\"\");\n  };\n\n  const createPoll = (e) => {\n    e.preventDefault();\n    if (!question) {\n      alert(\"Question is required!\");\n      return;\n    }\n    let optionsList = options.map((option) => option.text);\n    const pollData = {\n      question,\n      options: optionsList,\n    };\n    setQuestion(\"\");\n    setNewOption(\"\");\n    setOptions([]);\n    handleCreate(pollData);\n  };\n  const deleteOption = (id) => {\n    setOptions(options.filter((option) => option.id !== id));\n  };\n  return (\n    <div className=\"new-poll\">\n      <form>\n        <div className=\"form-control\">\n          <input\n            onChange={(e) => setQuestion(e.target.value)}\n            value={question}\n            type=\"text\"\n            name=\"\"\n            id=\"\"\n            placeholder=\"Poll question\"\n          />\n        </div>\n        {options.map((option, index) => (\n          <p key={option.id}>\n            {option.text}\n            <FaAngry color=\"red\" onClick={() => deleteOption(option.id)} />\n          </p>\n        ))}\n        <div className=\"form-control\">\n          <input\n            value={newOption}\n            onChange={(e) => setNewOption(e.target.value)}\n            type=\"text\"\n            placeholder=\"Response option\"\n          />\n        </div>\n        <button disabled={!newOption.length} onClick={handleAddOption}>\n          Add option\n        </button>\n        <button\n          onClick={createPoll}\n          disabled={newOption.length || options.length < 2 || !question.length}\n          type=\"submit\"\n        >\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewPoll;\n","import { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport PollsList from \"./components/PollsList\";\nimport NewPoll from \"./components/NewPoll\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [polls, setPolls] = useState([]);\n  useEffect(() => {\n    const getPolls = async () => {\n      const pollsFromServer = await fetchPolls();\n      setPolls(pollsFromServer);\n    };\n    getPolls();\n  }, []);\n  const fetchPolls = async () => {\n    const res = await fetch(\"http://localhost:5000/polls\");\n    const data = await res.json();\n    return data;\n  };\n  const handleVote = (choice, id) => {\n    let pollFromState = polls.find((poll) => poll._id === id);\n    let remainingPolls = polls.filter((poll) => poll._id !== id);\n    pollFromState.votes[choice]++;\n    axios\n      .post(`http://localhost:5000/polls/vote/${id}`, pollFromState)\n      .then((res) => console.log(res.data));\n    setPolls([pollFromState, ...remainingPolls]);\n  };\n  const handleCreate = (pollData) => {\n    pollData.votes = new Array(pollData.options.length).fill(0);\n    axios.post(`http://localhost:5000/polls/add`, pollData).then((res) => {\n      pollData._id = res.data;\n      setPolls([...polls, pollData]);\n    });\n  };\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">See All</Link>\n          </li>\n          <li>\n            <Link to=\"/create\">Create Survey</Link>\n          </li>\n        </ul>\n      </nav>\n      <div className=\"container\">\n        <Route path=\"/\" exact>\n          <PollsList polls={polls} handleVote={handleVote} />\n        </Route>\n        <Route path=\"/create\">\n          <NewPoll handleCreate={handleCreate} />\n        </Route>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}